// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rpc.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_rpc_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_rpc_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_rpc_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_rpc_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_rpc_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_rpc_2eproto_metadata_getter(int index);
namespace plasmaRPC {
class ObjectDetails;
struct ObjectDetailsDefaultTypeInternal;
extern ObjectDetailsDefaultTypeInternal _ObjectDetails_default_instance_;
class ObjectDetailsList;
struct ObjectDetailsListDefaultTypeInternal;
extern ObjectDetailsListDefaultTypeInternal _ObjectDetailsList_default_instance_;
class ObjectIDs;
struct ObjectIDsDefaultTypeInternal;
extern ObjectIDsDefaultTypeInternal _ObjectIDs_default_instance_;
class PlasmaObject;
struct PlasmaObjectDefaultTypeInternal;
extern PlasmaObjectDefaultTypeInternal _PlasmaObject_default_instance_;
}  // namespace plasmaRPC
PROTOBUF_NAMESPACE_OPEN
template<> ::plasmaRPC::ObjectDetails* Arena::CreateMaybeMessage<::plasmaRPC::ObjectDetails>(Arena*);
template<> ::plasmaRPC::ObjectDetailsList* Arena::CreateMaybeMessage<::plasmaRPC::ObjectDetailsList>(Arena*);
template<> ::plasmaRPC::ObjectIDs* Arena::CreateMaybeMessage<::plasmaRPC::ObjectIDs>(Arena*);
template<> ::plasmaRPC::PlasmaObject* Arena::CreateMaybeMessage<::plasmaRPC::PlasmaObject>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace plasmaRPC {

enum ObjectDetails_Status : int {
  ObjectDetails_Status_OK = 0,
  ObjectDetails_Status_MISSING = 1,
  ObjectDetails_Status_EVICTED = 2,
  ObjectDetails_Status_UNSEALED = 3,
  ObjectDetails_Status_ObjectDetails_Status_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ObjectDetails_Status_ObjectDetails_Status_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ObjectDetails_Status_IsValid(int value);
constexpr ObjectDetails_Status ObjectDetails_Status_Status_MIN = ObjectDetails_Status_OK;
constexpr ObjectDetails_Status ObjectDetails_Status_Status_MAX = ObjectDetails_Status_UNSEALED;
constexpr int ObjectDetails_Status_Status_ARRAYSIZE = ObjectDetails_Status_Status_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ObjectDetails_Status_descriptor();
template<typename T>
inline const std::string& ObjectDetails_Status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ObjectDetails_Status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ObjectDetails_Status_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ObjectDetails_Status_descriptor(), enum_t_value);
}
inline bool ObjectDetails_Status_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ObjectDetails_Status* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ObjectDetails_Status>(
    ObjectDetails_Status_descriptor(), name, value);
}
// ===================================================================

class ObjectIDs PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:plasmaRPC.ObjectIDs) */ {
 public:
  inline ObjectIDs() : ObjectIDs(nullptr) {}
  virtual ~ObjectIDs();
  explicit constexpr ObjectIDs(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ObjectIDs(const ObjectIDs& from);
  ObjectIDs(ObjectIDs&& from) noexcept
    : ObjectIDs() {
    *this = ::std::move(from);
  }

  inline ObjectIDs& operator=(const ObjectIDs& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObjectIDs& operator=(ObjectIDs&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ObjectIDs& default_instance() {
    return *internal_default_instance();
  }
  static inline const ObjectIDs* internal_default_instance() {
    return reinterpret_cast<const ObjectIDs*>(
               &_ObjectIDs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ObjectIDs& a, ObjectIDs& b) {
    a.Swap(&b);
  }
  inline void Swap(ObjectIDs* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObjectIDs* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ObjectIDs* New() const final {
    return CreateMaybeMessage<ObjectIDs>(nullptr);
  }

  ObjectIDs* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ObjectIDs>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ObjectIDs& from);
  void MergeFrom(const ObjectIDs& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObjectIDs* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "plasmaRPC.ObjectIDs";
  }
  protected:
  explicit ObjectIDs(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_rpc_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdsFieldNumber = 1,
  };
  // repeated string ids = 1;
  int ids_size() const;
  private:
  int _internal_ids_size() const;
  public:
  void clear_ids();
  const std::string& ids(int index) const;
  std::string* mutable_ids(int index);
  void set_ids(int index, const std::string& value);
  void set_ids(int index, std::string&& value);
  void set_ids(int index, const char* value);
  void set_ids(int index, const char* value, size_t size);
  std::string* add_ids();
  void add_ids(const std::string& value);
  void add_ids(std::string&& value);
  void add_ids(const char* value);
  void add_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_ids();
  private:
  const std::string& _internal_ids(int index) const;
  std::string* _internal_add_ids();
  public:

  // @@protoc_insertion_point(class_scope:plasmaRPC.ObjectIDs)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> ids_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class PlasmaObject PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:plasmaRPC.PlasmaObject) */ {
 public:
  inline PlasmaObject() : PlasmaObject(nullptr) {}
  virtual ~PlasmaObject();
  explicit constexpr PlasmaObject(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlasmaObject(const PlasmaObject& from);
  PlasmaObject(PlasmaObject&& from) noexcept
    : PlasmaObject() {
    *this = ::std::move(from);
  }

  inline PlasmaObject& operator=(const PlasmaObject& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlasmaObject& operator=(PlasmaObject&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PlasmaObject& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlasmaObject* internal_default_instance() {
    return reinterpret_cast<const PlasmaObject*>(
               &_PlasmaObject_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PlasmaObject& a, PlasmaObject& b) {
    a.Swap(&b);
  }
  inline void Swap(PlasmaObject* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlasmaObject* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlasmaObject* New() const final {
    return CreateMaybeMessage<PlasmaObject>(nullptr);
  }

  PlasmaObject* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlasmaObject>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PlasmaObject& from);
  void MergeFrom(const PlasmaObject& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlasmaObject* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "plasmaRPC.PlasmaObject";
  }
  protected:
  explicit PlasmaObject(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_rpc_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataOffsetFieldNumber = 2,
    kMetadataOffsetFieldNumber = 3,
    kDataSizeFieldNumber = 4,
    kMetadataSizeFieldNumber = 5,
    kDeviceNumFieldNumber = 6,
  };
  // uint64 data_offset = 2;
  void clear_data_offset();
  ::PROTOBUF_NAMESPACE_ID::uint64 data_offset() const;
  void set_data_offset(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_data_offset() const;
  void _internal_set_data_offset(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 metadata_offset = 3;
  void clear_metadata_offset();
  ::PROTOBUF_NAMESPACE_ID::uint64 metadata_offset() const;
  void set_metadata_offset(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_metadata_offset() const;
  void _internal_set_metadata_offset(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 data_size = 4;
  void clear_data_size();
  ::PROTOBUF_NAMESPACE_ID::uint64 data_size() const;
  void set_data_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_data_size() const;
  void _internal_set_data_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 metadata_size = 5;
  void clear_metadata_size();
  ::PROTOBUF_NAMESPACE_ID::uint64 metadata_size() const;
  void set_metadata_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_metadata_size() const;
  void _internal_set_metadata_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 device_num = 6;
  void clear_device_num();
  ::PROTOBUF_NAMESPACE_ID::uint32 device_num() const;
  void set_device_num(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_device_num() const;
  void _internal_set_device_num(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:plasmaRPC.PlasmaObject)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 data_offset_;
  ::PROTOBUF_NAMESPACE_ID::uint64 metadata_offset_;
  ::PROTOBUF_NAMESPACE_ID::uint64 data_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 metadata_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 device_num_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class ObjectDetails PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:plasmaRPC.ObjectDetails) */ {
 public:
  inline ObjectDetails() : ObjectDetails(nullptr) {}
  virtual ~ObjectDetails();
  explicit constexpr ObjectDetails(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ObjectDetails(const ObjectDetails& from);
  ObjectDetails(ObjectDetails&& from) noexcept
    : ObjectDetails() {
    *this = ::std::move(from);
  }

  inline ObjectDetails& operator=(const ObjectDetails& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObjectDetails& operator=(ObjectDetails&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ObjectDetails& default_instance() {
    return *internal_default_instance();
  }
  static inline const ObjectDetails* internal_default_instance() {
    return reinterpret_cast<const ObjectDetails*>(
               &_ObjectDetails_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ObjectDetails& a, ObjectDetails& b) {
    a.Swap(&b);
  }
  inline void Swap(ObjectDetails* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObjectDetails* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ObjectDetails* New() const final {
    return CreateMaybeMessage<ObjectDetails>(nullptr);
  }

  ObjectDetails* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ObjectDetails>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ObjectDetails& from);
  void MergeFrom(const ObjectDetails& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObjectDetails* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "plasmaRPC.ObjectDetails";
  }
  protected:
  explicit ObjectDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_rpc_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef ObjectDetails_Status Status;
  static constexpr Status OK =
    ObjectDetails_Status_OK;
  static constexpr Status MISSING =
    ObjectDetails_Status_MISSING;
  static constexpr Status EVICTED =
    ObjectDetails_Status_EVICTED;
  static constexpr Status UNSEALED =
    ObjectDetails_Status_UNSEALED;
  static inline bool Status_IsValid(int value) {
    return ObjectDetails_Status_IsValid(value);
  }
  static constexpr Status Status_MIN =
    ObjectDetails_Status_Status_MIN;
  static constexpr Status Status_MAX =
    ObjectDetails_Status_Status_MAX;
  static constexpr int Status_ARRAYSIZE =
    ObjectDetails_Status_Status_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Status_descriptor() {
    return ObjectDetails_Status_descriptor();
  }
  template<typename T>
  static inline const std::string& Status_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Status>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Status_Name.");
    return ObjectDetails_Status_Name(enum_t_value);
  }
  static inline bool Status_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Status* value) {
    return ObjectDetails_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kObjectFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // .plasmaRPC.PlasmaObject object = 2;
  bool has_object() const;
  private:
  bool _internal_has_object() const;
  public:
  void clear_object();
  const ::plasmaRPC::PlasmaObject& object() const;
  ::plasmaRPC::PlasmaObject* release_object();
  ::plasmaRPC::PlasmaObject* mutable_object();
  void set_allocated_object(::plasmaRPC::PlasmaObject* object);
  private:
  const ::plasmaRPC::PlasmaObject& _internal_object() const;
  ::plasmaRPC::PlasmaObject* _internal_mutable_object();
  public:
  void unsafe_arena_set_allocated_object(
      ::plasmaRPC::PlasmaObject* object);
  ::plasmaRPC::PlasmaObject* unsafe_arena_release_object();

  // .plasmaRPC.ObjectDetails.Status status = 1;
  void clear_status();
  ::plasmaRPC::ObjectDetails_Status status() const;
  void set_status(::plasmaRPC::ObjectDetails_Status value);
  private:
  ::plasmaRPC::ObjectDetails_Status _internal_status() const;
  void _internal_set_status(::plasmaRPC::ObjectDetails_Status value);
  public:

  // @@protoc_insertion_point(class_scope:plasmaRPC.ObjectDetails)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::plasmaRPC::PlasmaObject* object_;
  int status_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class ObjectDetailsList PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:plasmaRPC.ObjectDetailsList) */ {
 public:
  inline ObjectDetailsList() : ObjectDetailsList(nullptr) {}
  virtual ~ObjectDetailsList();
  explicit constexpr ObjectDetailsList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ObjectDetailsList(const ObjectDetailsList& from);
  ObjectDetailsList(ObjectDetailsList&& from) noexcept
    : ObjectDetailsList() {
    *this = ::std::move(from);
  }

  inline ObjectDetailsList& operator=(const ObjectDetailsList& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObjectDetailsList& operator=(ObjectDetailsList&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ObjectDetailsList& default_instance() {
    return *internal_default_instance();
  }
  static inline const ObjectDetailsList* internal_default_instance() {
    return reinterpret_cast<const ObjectDetailsList*>(
               &_ObjectDetailsList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ObjectDetailsList& a, ObjectDetailsList& b) {
    a.Swap(&b);
  }
  inline void Swap(ObjectDetailsList* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObjectDetailsList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ObjectDetailsList* New() const final {
    return CreateMaybeMessage<ObjectDetailsList>(nullptr);
  }

  ObjectDetailsList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ObjectDetailsList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ObjectDetailsList& from);
  void MergeFrom(const ObjectDetailsList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObjectDetailsList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "plasmaRPC.ObjectDetailsList";
  }
  protected:
  explicit ObjectDetailsList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_rpc_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectsDetailsFieldNumber = 1,
  };
  // repeated .plasmaRPC.ObjectDetails objects_details = 1;
  int objects_details_size() const;
  private:
  int _internal_objects_details_size() const;
  public:
  void clear_objects_details();
  ::plasmaRPC::ObjectDetails* mutable_objects_details(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::plasmaRPC::ObjectDetails >*
      mutable_objects_details();
  private:
  const ::plasmaRPC::ObjectDetails& _internal_objects_details(int index) const;
  ::plasmaRPC::ObjectDetails* _internal_add_objects_details();
  public:
  const ::plasmaRPC::ObjectDetails& objects_details(int index) const;
  ::plasmaRPC::ObjectDetails* add_objects_details();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::plasmaRPC::ObjectDetails >&
      objects_details() const;

  // @@protoc_insertion_point(class_scope:plasmaRPC.ObjectDetailsList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::plasmaRPC::ObjectDetails > objects_details_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ObjectIDs

// repeated string ids = 1;
inline int ObjectIDs::_internal_ids_size() const {
  return ids_.size();
}
inline int ObjectIDs::ids_size() const {
  return _internal_ids_size();
}
inline void ObjectIDs::clear_ids() {
  ids_.Clear();
}
inline std::string* ObjectIDs::add_ids() {
  // @@protoc_insertion_point(field_add_mutable:plasmaRPC.ObjectIDs.ids)
  return _internal_add_ids();
}
inline const std::string& ObjectIDs::_internal_ids(int index) const {
  return ids_.Get(index);
}
inline const std::string& ObjectIDs::ids(int index) const {
  // @@protoc_insertion_point(field_get:plasmaRPC.ObjectIDs.ids)
  return _internal_ids(index);
}
inline std::string* ObjectIDs::mutable_ids(int index) {
  // @@protoc_insertion_point(field_mutable:plasmaRPC.ObjectIDs.ids)
  return ids_.Mutable(index);
}
inline void ObjectIDs::set_ids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:plasmaRPC.ObjectIDs.ids)
  ids_.Mutable(index)->assign(value);
}
inline void ObjectIDs::set_ids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:plasmaRPC.ObjectIDs.ids)
  ids_.Mutable(index)->assign(std::move(value));
}
inline void ObjectIDs::set_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:plasmaRPC.ObjectIDs.ids)
}
inline void ObjectIDs::set_ids(int index, const char* value, size_t size) {
  ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:plasmaRPC.ObjectIDs.ids)
}
inline std::string* ObjectIDs::_internal_add_ids() {
  return ids_.Add();
}
inline void ObjectIDs::add_ids(const std::string& value) {
  ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:plasmaRPC.ObjectIDs.ids)
}
inline void ObjectIDs::add_ids(std::string&& value) {
  ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:plasmaRPC.ObjectIDs.ids)
}
inline void ObjectIDs::add_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:plasmaRPC.ObjectIDs.ids)
}
inline void ObjectIDs::add_ids(const char* value, size_t size) {
  ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:plasmaRPC.ObjectIDs.ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ObjectIDs::ids() const {
  // @@protoc_insertion_point(field_list:plasmaRPC.ObjectIDs.ids)
  return ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ObjectIDs::mutable_ids() {
  // @@protoc_insertion_point(field_mutable_list:plasmaRPC.ObjectIDs.ids)
  return &ids_;
}

// -------------------------------------------------------------------

// PlasmaObject

// uint64 data_offset = 2;
inline void PlasmaObject::clear_data_offset() {
  data_offset_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PlasmaObject::_internal_data_offset() const {
  return data_offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PlasmaObject::data_offset() const {
  // @@protoc_insertion_point(field_get:plasmaRPC.PlasmaObject.data_offset)
  return _internal_data_offset();
}
inline void PlasmaObject::_internal_set_data_offset(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  data_offset_ = value;
}
inline void PlasmaObject::set_data_offset(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_data_offset(value);
  // @@protoc_insertion_point(field_set:plasmaRPC.PlasmaObject.data_offset)
}

// uint64 metadata_offset = 3;
inline void PlasmaObject::clear_metadata_offset() {
  metadata_offset_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PlasmaObject::_internal_metadata_offset() const {
  return metadata_offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PlasmaObject::metadata_offset() const {
  // @@protoc_insertion_point(field_get:plasmaRPC.PlasmaObject.metadata_offset)
  return _internal_metadata_offset();
}
inline void PlasmaObject::_internal_set_metadata_offset(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  metadata_offset_ = value;
}
inline void PlasmaObject::set_metadata_offset(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_metadata_offset(value);
  // @@protoc_insertion_point(field_set:plasmaRPC.PlasmaObject.metadata_offset)
}

// uint64 data_size = 4;
inline void PlasmaObject::clear_data_size() {
  data_size_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PlasmaObject::_internal_data_size() const {
  return data_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PlasmaObject::data_size() const {
  // @@protoc_insertion_point(field_get:plasmaRPC.PlasmaObject.data_size)
  return _internal_data_size();
}
inline void PlasmaObject::_internal_set_data_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  data_size_ = value;
}
inline void PlasmaObject::set_data_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_data_size(value);
  // @@protoc_insertion_point(field_set:plasmaRPC.PlasmaObject.data_size)
}

// uint64 metadata_size = 5;
inline void PlasmaObject::clear_metadata_size() {
  metadata_size_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PlasmaObject::_internal_metadata_size() const {
  return metadata_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PlasmaObject::metadata_size() const {
  // @@protoc_insertion_point(field_get:plasmaRPC.PlasmaObject.metadata_size)
  return _internal_metadata_size();
}
inline void PlasmaObject::_internal_set_metadata_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  metadata_size_ = value;
}
inline void PlasmaObject::set_metadata_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_metadata_size(value);
  // @@protoc_insertion_point(field_set:plasmaRPC.PlasmaObject.metadata_size)
}

// uint32 device_num = 6;
inline void PlasmaObject::clear_device_num() {
  device_num_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PlasmaObject::_internal_device_num() const {
  return device_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PlasmaObject::device_num() const {
  // @@protoc_insertion_point(field_get:plasmaRPC.PlasmaObject.device_num)
  return _internal_device_num();
}
inline void PlasmaObject::_internal_set_device_num(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  device_num_ = value;
}
inline void PlasmaObject::set_device_num(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_device_num(value);
  // @@protoc_insertion_point(field_set:plasmaRPC.PlasmaObject.device_num)
}

// -------------------------------------------------------------------

// ObjectDetails

// .plasmaRPC.ObjectDetails.Status status = 1;
inline void ObjectDetails::clear_status() {
  status_ = 0;
}
inline ::plasmaRPC::ObjectDetails_Status ObjectDetails::_internal_status() const {
  return static_cast< ::plasmaRPC::ObjectDetails_Status >(status_);
}
inline ::plasmaRPC::ObjectDetails_Status ObjectDetails::status() const {
  // @@protoc_insertion_point(field_get:plasmaRPC.ObjectDetails.status)
  return _internal_status();
}
inline void ObjectDetails::_internal_set_status(::plasmaRPC::ObjectDetails_Status value) {
  
  status_ = value;
}
inline void ObjectDetails::set_status(::plasmaRPC::ObjectDetails_Status value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:plasmaRPC.ObjectDetails.status)
}

// .plasmaRPC.PlasmaObject object = 2;
inline bool ObjectDetails::_internal_has_object() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || object_ != nullptr);
  return value;
}
inline bool ObjectDetails::has_object() const {
  return _internal_has_object();
}
inline void ObjectDetails::clear_object() {
  if (GetArena() == nullptr && object_ != nullptr) {
    delete object_;
  }
  object_ = nullptr;
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::plasmaRPC::PlasmaObject& ObjectDetails::_internal_object() const {
  const ::plasmaRPC::PlasmaObject* p = object_;
  return p != nullptr ? *p : reinterpret_cast<const ::plasmaRPC::PlasmaObject&>(
      ::plasmaRPC::_PlasmaObject_default_instance_);
}
inline const ::plasmaRPC::PlasmaObject& ObjectDetails::object() const {
  // @@protoc_insertion_point(field_get:plasmaRPC.ObjectDetails.object)
  return _internal_object();
}
inline void ObjectDetails::unsafe_arena_set_allocated_object(
    ::plasmaRPC::PlasmaObject* object) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(object_);
  }
  object_ = object;
  if (object) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:plasmaRPC.ObjectDetails.object)
}
inline ::plasmaRPC::PlasmaObject* ObjectDetails::release_object() {
  _has_bits_[0] &= ~0x00000001u;
  ::plasmaRPC::PlasmaObject* temp = object_;
  object_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::plasmaRPC::PlasmaObject* ObjectDetails::unsafe_arena_release_object() {
  // @@protoc_insertion_point(field_release:plasmaRPC.ObjectDetails.object)
  _has_bits_[0] &= ~0x00000001u;
  ::plasmaRPC::PlasmaObject* temp = object_;
  object_ = nullptr;
  return temp;
}
inline ::plasmaRPC::PlasmaObject* ObjectDetails::_internal_mutable_object() {
  _has_bits_[0] |= 0x00000001u;
  if (object_ == nullptr) {
    auto* p = CreateMaybeMessage<::plasmaRPC::PlasmaObject>(GetArena());
    object_ = p;
  }
  return object_;
}
inline ::plasmaRPC::PlasmaObject* ObjectDetails::mutable_object() {
  // @@protoc_insertion_point(field_mutable:plasmaRPC.ObjectDetails.object)
  return _internal_mutable_object();
}
inline void ObjectDetails::set_allocated_object(::plasmaRPC::PlasmaObject* object) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete object_;
  }
  if (object) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(object);
    if (message_arena != submessage_arena) {
      object = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, object, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  object_ = object;
  // @@protoc_insertion_point(field_set_allocated:plasmaRPC.ObjectDetails.object)
}

// -------------------------------------------------------------------

// ObjectDetailsList

// repeated .plasmaRPC.ObjectDetails objects_details = 1;
inline int ObjectDetailsList::_internal_objects_details_size() const {
  return objects_details_.size();
}
inline int ObjectDetailsList::objects_details_size() const {
  return _internal_objects_details_size();
}
inline void ObjectDetailsList::clear_objects_details() {
  objects_details_.Clear();
}
inline ::plasmaRPC::ObjectDetails* ObjectDetailsList::mutable_objects_details(int index) {
  // @@protoc_insertion_point(field_mutable:plasmaRPC.ObjectDetailsList.objects_details)
  return objects_details_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::plasmaRPC::ObjectDetails >*
ObjectDetailsList::mutable_objects_details() {
  // @@protoc_insertion_point(field_mutable_list:plasmaRPC.ObjectDetailsList.objects_details)
  return &objects_details_;
}
inline const ::plasmaRPC::ObjectDetails& ObjectDetailsList::_internal_objects_details(int index) const {
  return objects_details_.Get(index);
}
inline const ::plasmaRPC::ObjectDetails& ObjectDetailsList::objects_details(int index) const {
  // @@protoc_insertion_point(field_get:plasmaRPC.ObjectDetailsList.objects_details)
  return _internal_objects_details(index);
}
inline ::plasmaRPC::ObjectDetails* ObjectDetailsList::_internal_add_objects_details() {
  return objects_details_.Add();
}
inline ::plasmaRPC::ObjectDetails* ObjectDetailsList::add_objects_details() {
  // @@protoc_insertion_point(field_add:plasmaRPC.ObjectDetailsList.objects_details)
  return _internal_add_objects_details();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::plasmaRPC::ObjectDetails >&
ObjectDetailsList::objects_details() const {
  // @@protoc_insertion_point(field_list:plasmaRPC.ObjectDetailsList.objects_details)
  return objects_details_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace plasmaRPC

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::plasmaRPC::ObjectDetails_Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::plasmaRPC::ObjectDetails_Status>() {
  return ::plasmaRPC::ObjectDetails_Status_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_rpc_2eproto
